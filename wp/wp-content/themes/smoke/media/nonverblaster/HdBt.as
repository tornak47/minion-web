package nonverblaster {	import flash.display.*;	import flash.events.*;	import flash.media.*;	import flash.net.*;	import de.popforge.events.*;	import com.gskinner.motion.GTween;	import fl.motion.easing.*;		public class HdBt extends MovieClip{		private var gap:Number;		private var maskDefaultW:Number;		private var maskTargetW:Number;		private var defaultW:Number;		private var activeX:Number;		private var backTargetX:Number = 0;				private var defaultQuality:String;				private var main:MovieClip;				public function HdBt(){			grf.mouseEnabled = false;			frame.mouseEnabled = false;			maskDefaultW = maskTargetW = maske.width;			gap = grf.x;			defaultW = back.width;			visible = false;			alpha = 0;		}		private function setTargetX(){					}		public function init(main){			this.main = main;			SimpleMouseEventHandler.register( this.back );			addEventListener( SimpleMouseEvent.RELEASE, sharedButtonHandler );			addEventListener( SimpleMouseEvent.ROLL_OVER, sharedButtonHandler );			addEventListener( SimpleMouseEvent.ROLL_OUT, sharedButtonHandler );		}		private function sharedButtonHandler(event:SimpleMouseEvent):void {			// what button was triggered?			switch (event.target) {				case this.back :					switch (event.type) {						case "onRelease" :							toggleHD();							break;						case "onRollOver":							main.stopHideTimer();							openIt();							break;						case "onRollOut":							main.startHideTimer();							closeIt();							break;					}				break;			}		}		private function openIt(){			activeX = defaultW - (grf.width + 2 * gap);			backTargetX = activeX;			maskTargetW = grf.width + 7;		}		private function closeIt(){			backTargetX = 0;			maskTargetW = maskDefaultW;		}		private function toggleHD(){			if(Glo.bal.quality == "high"){				main.setQualityAndRestart("standard");				grf.gotoAndStop("off");			} else {				main.setQualityAndRestart("high");				grf.gotoAndStop("on");			}		}		public function setText(){			//trace("setText: " + Glo.bal.quality);			if(Glo.bal.quality == "high"){				grf.gotoAndStop("on");			} else {				grf.gotoAndStop("off");			}					}		public function loopIt(){			back.x += (backTargetX - back.x)/3;			maske.width += (maskTargetW - maske.width)/3;			back.width = defaultW - back.x;			maske.x = grf.x = Math.floor(back.x + gap);		}		public function fadeIn(){			if(Glo.bal.hdURL != undefined){				new GTween(this, .5, {alpha:1}, {ease:Cubic.easeOut});			}		}		public function fadeOut(){			new GTween(this, .5, {alpha:0}, {ease:Cubic.easeIn});		}		public function setTint(){			Colorizer.colorize(grf, Glo.bal.controlColour);			Colorizer.colorize(back, Glo.bal.controlBackColour);			back.alpha = .6;		}	}	}