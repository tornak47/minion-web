package nonverblaster {	import flash.display.*;	import flash.utils.*;	import flash.events.*;	import flash.ui.*;		import de.popforge.events.*;		import com.gskinner.motion.GTween;	import fl.motion.easing.*;	import flash.external.ExternalInterface;	public class Control extends MovieClip {				private var hoverElements			:Array;		private var backElements			:Array;		private var buttons					:Array;		private var gap						:uint;		private var margin					:uint;		private var i						:uint;				private var isFullScreen			:Boolean = false;				private var fullScreenButActWidth	:Number = 7;		private var fullScreenButActHeight	:Number = 3;		private var fullScreenButPassWidth	:Number = 1;		private var fullScreenButPassHeight	:Number = 1;				private var tweenSpeed				:Number;				private var main					:MovieClip;				private var media					:String;				public var volumeControl			:MovieClip;				private var vcHorizontal			:VolumeControlHorizontal;		private var vcVertical				:VolumeControlVertical;				private var oldProgress				:Number = 0;				public function Control() {			if(Glo.bal.media != "audio"){				//visible = false;			}			Glo.bal.control = this;		}		public function init(_main, _gap, _margin, _tweenSpeed) {			this.main = _main;			this.gap = _gap;			this.margin = _margin;			this.tweenSpeed = _tweenSpeed;			y = -20;			//						timeCode.alpha = 0;			alpha = 0;						media = Glo.bal.media;						vcHorizontal = new VolumeControlHorizontal();			vcVertical = new VolumeControlVertical();						initButtons();						progressBar.playingBar.width = 0;			volumeBack.height = 0;		}		public function setTint(){			for (i=0; i<hoverElements.length; i++) {				Colorizer.colorize(hoverElements[i], Glo.bal.controlColor);			}			for (i=0; i<backElements.length; i++) {				Colorizer.colorize(backElements[i], Glo.bal.controlBackColor);				backElements[i].alpha = .6;			}					}		public function loopIt() {			computeProgress();			adjustTimeCode();		}		public function setProgressToZero(){			//new GTween(progressBar.playingBar, 1, {scaleX:0}, {ease:Quintic.easeInOut});			progressBar.playingBar.scaleX = 0;		}		private function initButtons() {			//			// all elements that get a special color in an Array			hoverElements = new Array(playPause, progressBar, vcHorizontal.grf, vcVertical.grf, fullScreenBut.grf, timeCode.minText, timeCode.secText, timeCode.colon);			backElements = new Array(back, timeCode.back, volumeBack);			// Configure the various Button instances. Each Button instance uses 			// the same click handler.			buttons = new Array(playPause.hotArea, progressBar.sliderBar, fullScreenBut.hotArea, vcHorizontal.sliderBar, vcVertical.sliderBar);						addEventListener( SimpleMouseEvent.PRESS, sharedButtonHandler );			addEventListener( SimpleMouseEvent.RELEASE, sharedButtonHandler );			addEventListener( SimpleMouseEvent.RELEASE_OUTSIDE, sharedButtonHandler );			addEventListener( SimpleMouseEvent.ROLL_OVER, sharedButtonHandler );			addEventListener( SimpleMouseEvent.ROLL_OUT, sharedButtonHandler );						for (i=0; i<buttons.length; i++) {				SimpleMouseEventHandler.register( buttons[i] );			}		}		public function setInactive(){			for (i=1; i<buttons.length - 2; i++) {				buttons[i].mouseEnabled = false;			}		}		public function setActive(){			for (i=0; i<buttons.length; i++) {				buttons[i].mouseEnabled = true;			}		}		//		/////////////////////////////////////////////////////////////////////////////////////////////		// eventHandler for all buttons 		// 		private function sharedButtonHandler(event:SimpleMouseEvent):void {			// what button was triggered?			switch (event.target) {				case playPause.hotArea :					switch (event.type) {						case "onRollOver" :							main.stopHideTimer();							break;						case "onRollOut" :							main.startHideTimer();							break;						case "onPress" :							if (main.started == false){								main.playMedia();							} else if(main.isComplete == false){								main.togglePlay();							} else {								main.restartMedia();							}							break;						case "onReleaseOutside" :							break;					}					break;									case progressBar.sliderBar :					switch (event.type) {						case "onRollOver" :							main.stopHideTimer();							showTimeCode();							break;						case "onRollOut" :							main.startHideTimer();							hideTimeCode();							break;						case "onPress" :							main.setSeeking(true);							break;						case "onRelease" :							main.setSeeking(false);							break;						case "onReleaseOutside" :							main.startHideTimer();							hideTimeCode();							main.setSeeking(false);							break;					}					break;									case fullScreenBut.hotArea :					var inst = fullScreenBut.grf.fill;					switch (event.type) {						case "onRollOver" :							main.stopHideTimer();							new GTween(inst, tweenSpeed, {width:fullScreenButActWidth, height:fullScreenButActHeight}, {ease:Cubic.easeOut});							break;						case "onRollOut" :							main.startHideTimer();							new GTween(inst, tweenSpeed, {width:fullScreenButPassWidth, height:fullScreenButPassHeight}, {ease:Cubic.easeOut});							break;						case "onRelease" :							main.toggleFullScreen();							break;					}					break;									case volumeControl.sliderBar :					switch (event.type) {						case "onRollOver" :							main.stopHideTimer();							volumeControl.isOn = true;							break;						case "onRollOut" :							main.startHideTimer();							volumeControl.isOn = false;							break;						case "onPress" :							volumeControl.pressed = true;							break;						case "onRelease" :							volumeControl.pressed = false;							break;						case "onReleaseOutside" :							main.startHideTimer();							volumeControl.pressed = false;							volumeControl.isOn = false;							break;					}					break;			}		}		/////////////////////////////////////////////////////////////////////////////////////////////		// PLAYING PROGRESS AND SEARCH		//		private function computeProgress():void {			// Adjust the loading bar depending on the loaded percent			if(!isNaN(main.getLoadingProgress())){				progressBar.loadingBar.scaleX += (main.getLoadingProgress() - progressBar.loadingBar.scaleX) / 5;				progressBar.sliderBar.width = progressBar.loadingBar.width - 1;			}			if (main.isSeeking == true) {					theSliderRules();			} else {				theProgressRules();			}		}		//		//		private function adjustTimeCode(){			timeCode.y = Math.floor(back.y - timeCode.back.height);						timeCode.x = Math.floor(progressBar.x + progressBar.playingBar.width * progressBar.scaleX + timeCode.back.width / 2);						var pos = main.getTime();			var minutes:Number = Math.floor(pos  / 60);			var seconds:Number = Math.floor(pos) % 60;			timeCode.minText.text = ((minutes < 10) ? "0" + minutes : minutes);			timeCode.secText.text = ((seconds < 10) ? "0" + seconds : seconds);		}		private function showTimeCode(){			if(Glo.bal.showTimecode == "true"/* && media != "audio"*/){				new GTween(timeCode, tweenSpeed, {alpha:1}, {ease:Cubic.easeOut});			}		}		private function hideTimeCode(){			new GTween(timeCode, tweenSpeed, {alpha:0}, {ease:Cubic.easeIn});		}				//		// Adjust the playing bar depending on the played percent		function theProgressRules():void {			var playingProgress:Number;			try {				playingProgress = main.getPlayingProgress();				if(isNaN(playingProgress)){					playingProgress = 0;				}								if(playingProgress > oldProgress){					main.bufferWheel.fadeOut();				}				oldProgress = playingProgress;			} catch(e:Error){				playingProgress = 0;			}			progressBar.playingBar.scaleX += (playingProgress - progressBar.playingBar.scaleX) / 5;					}		//		// If the slider is dragged:		// Adjust the playing progress depending on the scale of the playingBar		function theSliderRules():void {			if (progressBar.playingBar.width <= progressBar.sliderBar.width) {				//progressBar.playingBar.width += (progressBar.mouseX - progressBar.playingBar.width)/3;				progressBar.playingBar.width = progressBar.mouseX;			}			if (progressBar.playingBar.width > progressBar.sliderBar.width) {				progressBar.playingBar.width = progressBar.sliderBar.width;			}			main.setPlayingProgress(progressBar.playingBar.scaleX);		}		//		/////////////////////////////////////////////////////////////////////////////////////////////		// VOLUME CONTROL 				public function setState(isPlaying){			if (isPlaying == true) {				playPause.gotoAndStop(1);			} else {				playPause.gotoAndStop(2);			}		}		public function fitToScreen(isFullScreen, vidX, vidY, vidW, vidH){			this.isFullScreen = isFullScreen;						if(Glo.bal.stageHeight < 130 && media != "video"){				this.addChild(vcHorizontal);				volumeControl = vcHorizontal;				vcVertical.stage != null ? this.removeChild(vcVertical) : 0;				fullScreenBut.visible = false;			} else {				this.addChild(vcVertical);				volumeControl = vcVertical;				vcHorizontal.stage != null ? this.removeChild(vcHorizontal) : 0;				fullScreenBut.visible = true;							}			this.addChild(volumeControl);			volumeControl.y = 7;						switch (isFullScreen) {				case true:					x = Math.round(vidX + margin);					y = Math.round(Glo.bal.stageHeight - back.height - margin);					back.width = Math.round(Glo.bal.stageWidth - margin * 2);					//					fullScreenButActWidth = 1;					fullScreenButActHeight = 1;					fullScreenButPassWidth = 7;					fullScreenButPassHeight = 3;					//					fullScreenBut.grf.fill.width = 7;					fullScreenBut.grf.fill.height = 3;					break;				case false:					x = Math.floor(vidX);					y = Math.floor(vidY + vidH - back.height+1);					back.width = Math.floor(vidW);					//					//					fullScreenButActWidth = 7;					fullScreenButActHeight = 3;					fullScreenButPassWidth = 1;					fullScreenButPassHeight = 1;					//					fullScreenBut.grf.fill.width = 1;					fullScreenBut.grf.fill.height = 1;					break;			}			//			fullScreenBut.x = Math.round(back.width - fullScreenBut.grf.width - gap);			if(media == "audio" || Glo.bal.treatAsAudio == "true"){				volumeControl.x = Math.round(back.width - volumeControl.sliderBar.width - gap);			} else {				volumeControl.x = fullScreenBut.x - fullScreenBut.grf.width - gap;			}									// playPause.grf is null at this point						progressBar.x = playPause.x + 8 + gap;			progressBar.width = Math.round(volumeControl.x - progressBar.x - gap);						//			volumeBack.x = volumeControl.x - 5;		}				//		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////		// Functions for fading the control in and out  		//		// fadeIn		public function fadeIn() {			Mouse.show();			visible = true;			new GTween(this, .5, {alpha:1}, {ease:Cubic.easeOut});		}		public function fadeOut(isComplete) {			new GTween(this, .5, {alpha:0, ease:Cubic.easeIn}, {completeListener:fadeOutHandler});						function fadeOutHandler(e:Event) {				visible = false;				if(isComplete != true && main.started == true && isFullScreen == true){					//Mouse.hide();				}			}		}			}}