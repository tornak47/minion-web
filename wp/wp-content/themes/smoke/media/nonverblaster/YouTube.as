package nonverblaster{		import flash.display.*;	import flash.display.Loader;	import flash.events.*;	import flash.net.URLRequest;	import flash.external.*;	import flash.net.*;	import flash.system.Security;		public class YouTube extends MovieClip {		// This will hold the API player instance once it is initialized.		private var player						:Object;		private var loader						:Loader = new Loader();		private var videoID						:String;		private var playerState					:Number;		private var main						:MovieClip;		private var overlay						:Sprite = new Sprite();		private var firstTimePlay 				:Boolean = true;				public function YouTube($main){			this.main = $main;			if(stage != null){				stage.scaleMode = "noScale";				stage.align = "TL";				init("http://www.youtube.com/watch?v=UrGcd6PN7EE");			}			Security.allowDomain("*");									if(Glo.bal.onClick != "" && Glo.bal.onClick != "disabled"){				overlay.buttonMode = true;				overlay.addEventListener(MouseEvent.CLICK, btHandler);			}		}		private function btHandler(event:Event){			switch(event.type){				case "click":				if(Glo.bal.onClick == "togglePlay"){					main.togglePlay();				} else if(Glo.bal.onClick == "toggleFullScreen"){					main.toggleFullScreen();				} else if(Glo.bal.onClick.indexOf(".") != -1) {					navigateToURL(new URLRequest(Glo.bal.onClick), "_self");				}				break;			}		}		public function init(youtubeURL){			trace(youtubeURL);			videoID = youtubeURL.split("?v=")[1];			if(loader.stage == null){				loader.contentLoaderInfo.addEventListener(Event.INIT, onLoaderInit);				loader.load(new URLRequest("http://www.youtube.com/apiplayer?version=3"));				addChild(loader);			} else {				startPlayback();			}		}		function onLoaderInit(event:Event):void {			loader.content.addEventListener("onReady", onPlayerReady);			loader.content.addEventListener("onError", onPlayerError);			loader.content.addEventListener("onStateChange", onPlayerStateChange);			loader.content.addEventListener("onPlaybackQualityChange", onVideoPlaybackQualityChange);		}		function onPlayerReady(event:Event):void {			// Event.data contains the event parameter, which is the Player API ID 			log("player ready: " + Object(event).data);			// Once this event has been dispatched by the player, we can use			// cueVideoById, loadVideoById, cueVideoByUrl and loadVideoByUrl			// to load a particular YouTube video.			player = loader.content;			log("Player Loaded!");			//log(player.getSize());			startPlayback();		}		public function fit(){			if(player != null){				player.setSize(Glo.bal.stageWidth, Glo.bal.stageHeight);				with(overlay.graphics){					clear();					addChild(overlay);					beginFill(0xfff000, 0);					drawRect(0,0,Glo.bal.stageWidth, Glo.bal.stageHeight);					endFill();				}			}		}		function onPlayerError(event:Event):void {			// Event.data contains the event parameter, which is the error code			trace("player error:", Object(event).data);		}		function onPlayerStateChange(event:Event):void {			// Event.data contains the event parameter, which is the new player state			log("player state:" + playerState);			playerState = Object(event).data;			loader.visible = true;			if(Object(event).data == 1){				log("Video duration: " + player.getDuration());				if(firstTimePlay == true){					firstTimePlay = false;					main.fitToScreen(null);				}			}						main.fitToScreen(null);			if(playerState == 0){				main.setEnd();			}		}		public function close(){			if(player != null){				player.destroy();				visible = false;			}		}		function onVideoPlaybackQualityChange(event:Event):void {			// Event.data contains the event parameter, which is the new video quality			trace("video quality:", Object(event).data);		}		function log(msg){			trace(msg);			//ExternalInterface.call("trace", msg);		}		public function togglePlay(){			if(playerState == 1){				player.pauseVideo();			} else if(playerState == 2){				player.playVideo();			};		}		public function setPause(){			player.pauseVideo();		}		public function restart(){			trace("restart YouTube!")			player.playVideo();		}		//		// Controlling Functions		//		public function startPlayback(){			if(player != null){				player.loadVideoById(videoID, 0, 'default'); //id, startSecond, quality				player.playVideo();				visible = true;				fit();			}		}		public function setDefault(){			if(player != null){				player.seekTo(0);				player.pauseVideo();			}		}		//		//		// Get-Set Functions		//		public function getPlayingProgress():Number{			return(player.getCurrentTime() / getDuration());		}		public function getLoadingProgress():Number {			//return(player.getVideoBytesLoaded() / player.getVideoBytesTotal());			return 1;		}		public function getTime():Number {			return(player.getCurrentTime());		}		public function getDuration():Number {			return(player.getDuration());		}		public function setPlayingProgress(progressBarScale):void {			player.seekTo(progressBarScale * getDuration());		}				public function setSoundTransform(st){			trace("Volume: " + st.volume)			if(player != null){				player.setVolume(st.volume * 100);			}		}		public function getVolume():Number{			var v = null;			if(player != null){				v = player.getVolume();			}			return v;		}	}}